// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: news.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_news_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_news_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021007 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_news_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_news_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_news_2eproto;
namespace test {
namespace proto {
class NewsHead;
struct NewsHeadDefaultTypeInternal;
extern NewsHeadDefaultTypeInternal _NewsHead_default_instance_;
class NewsRecord;
struct NewsRecordDefaultTypeInternal;
extern NewsRecordDefaultTypeInternal _NewsRecord_default_instance_;
class NewsStruct;
struct NewsStructDefaultTypeInternal;
extern NewsStructDefaultTypeInternal _NewsStruct_default_instance_;
}  // namespace proto
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> ::test::proto::NewsHead* Arena::CreateMaybeMessage<::test::proto::NewsHead>(Arena*);
template<> ::test::proto::NewsRecord* Arena::CreateMaybeMessage<::test::proto::NewsRecord>(Arena*);
template<> ::test::proto::NewsStruct* Arena::CreateMaybeMessage<::test::proto::NewsStruct>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test {
namespace proto {

// ===================================================================

class NewsHead final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.proto.NewsHead) */ {
 public:
  inline NewsHead() : NewsHead(nullptr) {}
  ~NewsHead() override;
  explicit PROTOBUF_CONSTEXPR NewsHead(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewsHead(const NewsHead& from);
  NewsHead(NewsHead&& from) noexcept
    : NewsHead() {
    *this = ::std::move(from);
  }

  inline NewsHead& operator=(const NewsHead& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewsHead& operator=(NewsHead&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewsHead& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewsHead* internal_default_instance() {
    return reinterpret_cast<const NewsHead*>(
               &_NewsHead_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NewsHead& a, NewsHead& b) {
    a.Swap(&b);
  }
  inline void Swap(NewsHead* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewsHead* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewsHead* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewsHead>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewsHead& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewsHead& from) {
    NewsHead::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewsHead* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.proto.NewsHead";
  }
  protected:
  explicit NewsHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // optional sint32 channel_id = 1;
  bool has_channel_id() const;
  private:
  bool _internal_has_channel_id() const;
  public:
  void clear_channel_id();
  int32_t channel_id() const;
  void set_channel_id(int32_t value);
  private:
  int32_t _internal_channel_id() const;
  void _internal_set_channel_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test.proto.NewsHead)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t channel_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_news_2eproto;
};
// -------------------------------------------------------------------

class NewsRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.proto.NewsRecord) */ {
 public:
  inline NewsRecord() : NewsRecord(nullptr) {}
  ~NewsRecord() override;
  explicit PROTOBUF_CONSTEXPR NewsRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewsRecord(const NewsRecord& from);
  NewsRecord(NewsRecord&& from) noexcept
    : NewsRecord() {
    *this = ::std::move(from);
  }

  inline NewsRecord& operator=(const NewsRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewsRecord& operator=(NewsRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewsRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewsRecord* internal_default_instance() {
    return reinterpret_cast<const NewsRecord*>(
               &_NewsRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NewsRecord& a, NewsRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(NewsRecord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewsRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewsRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewsRecord>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewsRecord& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewsRecord& from) {
    NewsRecord::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewsRecord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.proto.NewsRecord";
  }
  protected:
  explicit NewsRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorFieldNumber = 1,
    kTitleFieldNumber = 2,
    kSummaryFieldNumber = 3,
    kSourceFieldNumber = 4,
    kUpdateDateFieldNumber = 5,
    kUpdateTimeFieldNumber = 6,
    kPublishDateFieldNumber = 7,
    kPublishTimeFieldNumber = 8,
  };
  // optional bytes author = 1;
  bool has_author() const;
  private:
  bool _internal_has_author() const;
  public:
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_NODISCARD std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // optional bytes title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional bytes summary = 3;
  bool has_summary() const;
  private:
  bool _internal_has_summary() const;
  public:
  void clear_summary();
  const std::string& summary() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_summary(ArgT0&& arg0, ArgT... args);
  std::string* mutable_summary();
  PROTOBUF_NODISCARD std::string* release_summary();
  void set_allocated_summary(std::string* summary);
  private:
  const std::string& _internal_summary() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_summary(const std::string& value);
  std::string* _internal_mutable_summary();
  public:

  // optional bytes source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional sint32 update_date = 5;
  bool has_update_date() const;
  private:
  bool _internal_has_update_date() const;
  public:
  void clear_update_date();
  int32_t update_date() const;
  void set_update_date(int32_t value);
  private:
  int32_t _internal_update_date() const;
  void _internal_set_update_date(int32_t value);
  public:

  // optional sint32 update_time = 6;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  int32_t update_time() const;
  void set_update_time(int32_t value);
  private:
  int32_t _internal_update_time() const;
  void _internal_set_update_time(int32_t value);
  public:

  // optional sint32 publish_date = 7;
  bool has_publish_date() const;
  private:
  bool _internal_has_publish_date() const;
  public:
  void clear_publish_date();
  int32_t publish_date() const;
  void set_publish_date(int32_t value);
  private:
  int32_t _internal_publish_date() const;
  void _internal_set_publish_date(int32_t value);
  public:

  // optional sint32 publish_time = 8;
  bool has_publish_time() const;
  private:
  bool _internal_has_publish_time() const;
  public:
  void clear_publish_time();
  int32_t publish_time() const;
  void set_publish_time(int32_t value);
  private:
  int32_t _internal_publish_time() const;
  void _internal_set_publish_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test.proto.NewsRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr summary_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    int32_t update_date_;
    int32_t update_time_;
    int32_t publish_date_;
    int32_t publish_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_news_2eproto;
};
// -------------------------------------------------------------------

class NewsStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test.proto.NewsStruct) */ {
 public:
  inline NewsStruct() : NewsStruct(nullptr) {}
  ~NewsStruct() override;
  explicit PROTOBUF_CONSTEXPR NewsStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewsStruct(const NewsStruct& from);
  NewsStruct(NewsStruct&& from) noexcept
    : NewsStruct() {
    *this = ::std::move(from);
  }

  inline NewsStruct& operator=(const NewsStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewsStruct& operator=(NewsStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewsStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewsStruct* internal_default_instance() {
    return reinterpret_cast<const NewsStruct*>(
               &_NewsStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NewsStruct& a, NewsStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(NewsStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewsStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewsStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewsStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NewsStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NewsStruct& from) {
    NewsStruct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewsStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test.proto.NewsStruct";
  }
  protected:
  explicit NewsStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordFieldNumber = 2,
    kHeadFieldNumber = 1,
  };
  // repeated .test.proto.NewsRecord record = 2;
  int record_size() const;
  private:
  int _internal_record_size() const;
  public:
  void clear_record();
  ::test::proto::NewsRecord* mutable_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::proto::NewsRecord >*
      mutable_record();
  private:
  const ::test::proto::NewsRecord& _internal_record(int index) const;
  ::test::proto::NewsRecord* _internal_add_record();
  public:
  const ::test::proto::NewsRecord& record(int index) const;
  ::test::proto::NewsRecord* add_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::proto::NewsRecord >&
      record() const;

  // required .test.proto.NewsHead head = 1;
  bool has_head() const;
  private:
  bool _internal_has_head() const;
  public:
  void clear_head();
  const ::test::proto::NewsHead& head() const;
  PROTOBUF_NODISCARD ::test::proto::NewsHead* release_head();
  ::test::proto::NewsHead* mutable_head();
  void set_allocated_head(::test::proto::NewsHead* head);
  private:
  const ::test::proto::NewsHead& _internal_head() const;
  ::test::proto::NewsHead* _internal_mutable_head();
  public:
  void unsafe_arena_set_allocated_head(
      ::test::proto::NewsHead* head);
  ::test::proto::NewsHead* unsafe_arena_release_head();

  // @@protoc_insertion_point(class_scope:test.proto.NewsStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::proto::NewsRecord > record_;
    ::test::proto::NewsHead* head_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_news_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewsHead

// optional sint32 channel_id = 1;
inline bool NewsHead::_internal_has_channel_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewsHead::has_channel_id() const {
  return _internal_has_channel_id();
}
inline void NewsHead::clear_channel_id() {
  _impl_.channel_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t NewsHead::_internal_channel_id() const {
  return _impl_.channel_id_;
}
inline int32_t NewsHead::channel_id() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsHead.channel_id)
  return _internal_channel_id();
}
inline void NewsHead::_internal_set_channel_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.channel_id_ = value;
}
inline void NewsHead::set_channel_id(int32_t value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:test.proto.NewsHead.channel_id)
}

// -------------------------------------------------------------------

// NewsRecord

// optional bytes author = 1;
inline bool NewsRecord::_internal_has_author() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NewsRecord::has_author() const {
  return _internal_has_author();
}
inline void NewsRecord::clear_author() {
  _impl_.author_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NewsRecord::author() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsRecord.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewsRecord::set_author(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.author_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.proto.NewsRecord.author)
}
inline std::string* NewsRecord::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:test.proto.NewsRecord.author)
  return _s;
}
inline const std::string& NewsRecord::_internal_author() const {
  return _impl_.author_.Get();
}
inline void NewsRecord::_internal_set_author(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.author_.Set(value, GetArenaForAllocation());
}
inline std::string* NewsRecord::_internal_mutable_author() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.author_.Mutable(GetArenaForAllocation());
}
inline std::string* NewsRecord::release_author() {
  // @@protoc_insertion_point(field_release:test.proto.NewsRecord.author)
  if (!_internal_has_author()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.author_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NewsRecord::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.author_.SetAllocated(author, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.author_.IsDefault()) {
    _impl_.author_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.proto.NewsRecord.author)
}

// optional bytes title = 2;
inline bool NewsRecord::_internal_has_title() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NewsRecord::has_title() const {
  return _internal_has_title();
}
inline void NewsRecord::clear_title() {
  _impl_.title_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NewsRecord::title() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsRecord.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewsRecord::set_title(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.title_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.proto.NewsRecord.title)
}
inline std::string* NewsRecord::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:test.proto.NewsRecord.title)
  return _s;
}
inline const std::string& NewsRecord::_internal_title() const {
  return _impl_.title_.Get();
}
inline void NewsRecord::_internal_set_title(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* NewsRecord::_internal_mutable_title() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* NewsRecord::release_title() {
  // @@protoc_insertion_point(field_release:test.proto.NewsRecord.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NewsRecord::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.proto.NewsRecord.title)
}

// optional bytes summary = 3;
inline bool NewsRecord::_internal_has_summary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NewsRecord::has_summary() const {
  return _internal_has_summary();
}
inline void NewsRecord::clear_summary() {
  _impl_.summary_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NewsRecord::summary() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsRecord.summary)
  return _internal_summary();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewsRecord::set_summary(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.summary_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.proto.NewsRecord.summary)
}
inline std::string* NewsRecord::mutable_summary() {
  std::string* _s = _internal_mutable_summary();
  // @@protoc_insertion_point(field_mutable:test.proto.NewsRecord.summary)
  return _s;
}
inline const std::string& NewsRecord::_internal_summary() const {
  return _impl_.summary_.Get();
}
inline void NewsRecord::_internal_set_summary(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.summary_.Set(value, GetArenaForAllocation());
}
inline std::string* NewsRecord::_internal_mutable_summary() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.summary_.Mutable(GetArenaForAllocation());
}
inline std::string* NewsRecord::release_summary() {
  // @@protoc_insertion_point(field_release:test.proto.NewsRecord.summary)
  if (!_internal_has_summary()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.summary_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.summary_.IsDefault()) {
    _impl_.summary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NewsRecord::set_allocated_summary(std::string* summary) {
  if (summary != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.summary_.SetAllocated(summary, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.summary_.IsDefault()) {
    _impl_.summary_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.proto.NewsRecord.summary)
}

// optional bytes source = 4;
inline bool NewsRecord::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NewsRecord::has_source() const {
  return _internal_has_source();
}
inline void NewsRecord::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& NewsRecord::source() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsRecord.source)
  return _internal_source();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NewsRecord::set_source(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.source_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test.proto.NewsRecord.source)
}
inline std::string* NewsRecord::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:test.proto.NewsRecord.source)
  return _s;
}
inline const std::string& NewsRecord::_internal_source() const {
  return _impl_.source_.Get();
}
inline void NewsRecord::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* NewsRecord::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.source_.Mutable(GetArenaForAllocation());
}
inline std::string* NewsRecord::release_source() {
  // @@protoc_insertion_point(field_release:test.proto.NewsRecord.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.source_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NewsRecord::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.source_.SetAllocated(source, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.source_.IsDefault()) {
    _impl_.source_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test.proto.NewsRecord.source)
}

// optional sint32 update_date = 5;
inline bool NewsRecord::_internal_has_update_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NewsRecord::has_update_date() const {
  return _internal_has_update_date();
}
inline void NewsRecord::clear_update_date() {
  _impl_.update_date_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t NewsRecord::_internal_update_date() const {
  return _impl_.update_date_;
}
inline int32_t NewsRecord::update_date() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsRecord.update_date)
  return _internal_update_date();
}
inline void NewsRecord::_internal_set_update_date(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.update_date_ = value;
}
inline void NewsRecord::set_update_date(int32_t value) {
  _internal_set_update_date(value);
  // @@protoc_insertion_point(field_set:test.proto.NewsRecord.update_date)
}

// optional sint32 update_time = 6;
inline bool NewsRecord::_internal_has_update_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NewsRecord::has_update_time() const {
  return _internal_has_update_time();
}
inline void NewsRecord::clear_update_time() {
  _impl_.update_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t NewsRecord::_internal_update_time() const {
  return _impl_.update_time_;
}
inline int32_t NewsRecord::update_time() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsRecord.update_time)
  return _internal_update_time();
}
inline void NewsRecord::_internal_set_update_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.update_time_ = value;
}
inline void NewsRecord::set_update_time(int32_t value) {
  _internal_set_update_time(value);
  // @@protoc_insertion_point(field_set:test.proto.NewsRecord.update_time)
}

// optional sint32 publish_date = 7;
inline bool NewsRecord::_internal_has_publish_date() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NewsRecord::has_publish_date() const {
  return _internal_has_publish_date();
}
inline void NewsRecord::clear_publish_date() {
  _impl_.publish_date_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline int32_t NewsRecord::_internal_publish_date() const {
  return _impl_.publish_date_;
}
inline int32_t NewsRecord::publish_date() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsRecord.publish_date)
  return _internal_publish_date();
}
inline void NewsRecord::_internal_set_publish_date(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.publish_date_ = value;
}
inline void NewsRecord::set_publish_date(int32_t value) {
  _internal_set_publish_date(value);
  // @@protoc_insertion_point(field_set:test.proto.NewsRecord.publish_date)
}

// optional sint32 publish_time = 8;
inline bool NewsRecord::_internal_has_publish_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NewsRecord::has_publish_time() const {
  return _internal_has_publish_time();
}
inline void NewsRecord::clear_publish_time() {
  _impl_.publish_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t NewsRecord::_internal_publish_time() const {
  return _impl_.publish_time_;
}
inline int32_t NewsRecord::publish_time() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsRecord.publish_time)
  return _internal_publish_time();
}
inline void NewsRecord::_internal_set_publish_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.publish_time_ = value;
}
inline void NewsRecord::set_publish_time(int32_t value) {
  _internal_set_publish_time(value);
  // @@protoc_insertion_point(field_set:test.proto.NewsRecord.publish_time)
}

// -------------------------------------------------------------------

// NewsStruct

// required .test.proto.NewsHead head = 1;
inline bool NewsStruct::_internal_has_head() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.head_ != nullptr);
  return value;
}
inline bool NewsStruct::has_head() const {
  return _internal_has_head();
}
inline void NewsStruct::clear_head() {
  if (_impl_.head_ != nullptr) _impl_.head_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::test::proto::NewsHead& NewsStruct::_internal_head() const {
  const ::test::proto::NewsHead* p = _impl_.head_;
  return p != nullptr ? *p : reinterpret_cast<const ::test::proto::NewsHead&>(
      ::test::proto::_NewsHead_default_instance_);
}
inline const ::test::proto::NewsHead& NewsStruct::head() const {
  // @@protoc_insertion_point(field_get:test.proto.NewsStruct.head)
  return _internal_head();
}
inline void NewsStruct::unsafe_arena_set_allocated_head(
    ::test::proto::NewsHead* head) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.head_);
  }
  _impl_.head_ = head;
  if (head) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.proto.NewsStruct.head)
}
inline ::test::proto::NewsHead* NewsStruct::release_head() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::test::proto::NewsHead* temp = _impl_.head_;
  _impl_.head_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test::proto::NewsHead* NewsStruct::unsafe_arena_release_head() {
  // @@protoc_insertion_point(field_release:test.proto.NewsStruct.head)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::test::proto::NewsHead* temp = _impl_.head_;
  _impl_.head_ = nullptr;
  return temp;
}
inline ::test::proto::NewsHead* NewsStruct::_internal_mutable_head() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.head_ == nullptr) {
    auto* p = CreateMaybeMessage<::test::proto::NewsHead>(GetArenaForAllocation());
    _impl_.head_ = p;
  }
  return _impl_.head_;
}
inline ::test::proto::NewsHead* NewsStruct::mutable_head() {
  ::test::proto::NewsHead* _msg = _internal_mutable_head();
  // @@protoc_insertion_point(field_mutable:test.proto.NewsStruct.head)
  return _msg;
}
inline void NewsStruct::set_allocated_head(::test::proto::NewsHead* head) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.head_;
  }
  if (head) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(head);
    if (message_arena != submessage_arena) {
      head = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, head, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.head_ = head;
  // @@protoc_insertion_point(field_set_allocated:test.proto.NewsStruct.head)
}

// repeated .test.proto.NewsRecord record = 2;
inline int NewsStruct::_internal_record_size() const {
  return _impl_.record_.size();
}
inline int NewsStruct::record_size() const {
  return _internal_record_size();
}
inline void NewsStruct::clear_record() {
  _impl_.record_.Clear();
}
inline ::test::proto::NewsRecord* NewsStruct::mutable_record(int index) {
  // @@protoc_insertion_point(field_mutable:test.proto.NewsStruct.record)
  return _impl_.record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::proto::NewsRecord >*
NewsStruct::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:test.proto.NewsStruct.record)
  return &_impl_.record_;
}
inline const ::test::proto::NewsRecord& NewsStruct::_internal_record(int index) const {
  return _impl_.record_.Get(index);
}
inline const ::test::proto::NewsRecord& NewsStruct::record(int index) const {
  // @@protoc_insertion_point(field_get:test.proto.NewsStruct.record)
  return _internal_record(index);
}
inline ::test::proto::NewsRecord* NewsStruct::_internal_add_record() {
  return _impl_.record_.Add();
}
inline ::test::proto::NewsRecord* NewsStruct::add_record() {
  ::test::proto::NewsRecord* _add = _internal_add_record();
  // @@protoc_insertion_point(field_add:test.proto.NewsStruct.record)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test::proto::NewsRecord >&
NewsStruct::record() const {
  // @@protoc_insertion_point(field_list:test.proto.NewsStruct.record)
  return _impl_.record_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace test

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_news_2eproto
