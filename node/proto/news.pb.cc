// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: news.proto

#include "news.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace test {
namespace proto {
PROTOBUF_CONSTEXPR NewsHead::NewsHead(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.channel_id_)*/0} {}
struct NewsHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewsHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewsHeadDefaultTypeInternal() {}
  union {
    NewsHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewsHeadDefaultTypeInternal _NewsHead_default_instance_;
PROTOBUF_CONSTEXPR NewsRecord::NewsRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.author_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.summary_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.update_date_)*/0
  , /*decltype(_impl_.update_time_)*/0
  , /*decltype(_impl_.publish_date_)*/0
  , /*decltype(_impl_.publish_time_)*/0} {}
struct NewsRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewsRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewsRecordDefaultTypeInternal() {}
  union {
    NewsRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewsRecordDefaultTypeInternal _NewsRecord_default_instance_;
PROTOBUF_CONSTEXPR NewsStruct::NewsStruct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.record_)*/{}
  , /*decltype(_impl_.head_)*/nullptr} {}
struct NewsStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewsStructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewsStructDefaultTypeInternal() {}
  union {
    NewsStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewsStructDefaultTypeInternal _NewsStruct_default_instance_;
}  // namespace proto
}  // namespace test
static ::_pb::Metadata file_level_metadata_news_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_news_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_news_2eproto = nullptr;

const uint32_t TableStruct_news_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsHead, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsHead, _impl_.channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _impl_.author_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _impl_.summary_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _impl_.update_date_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _impl_.update_time_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _impl_.publish_date_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsRecord, _impl_.publish_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsStruct, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsStruct, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::test::proto::NewsStruct, _impl_.record_),
  0,
  ~0u,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::test::proto::NewsHead)},
  { 8, 22, -1, sizeof(::test::proto::NewsRecord)},
  { 30, 38, -1, sizeof(::test::proto::NewsStruct)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::test::proto::_NewsHead_default_instance_._instance,
  &::test::proto::_NewsRecord_default_instance_._instance,
  &::test::proto::_NewsStruct_default_instance_._instance,
};

const char descriptor_table_protodef_news_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nnews.proto\022\ntest.proto\"\036\n\010NewsHead\022\022\n\n"
  "channel_id\030\001 \001(\021\"\242\001\n\nNewsRecord\022\016\n\006autho"
  "r\030\001 \001(\014\022\r\n\005title\030\002 \001(\014\022\017\n\007summary\030\003 \001(\014\022"
  "\016\n\006source\030\004 \001(\014\022\023\n\013update_date\030\005 \001(\021\022\023\n\013"
  "update_time\030\006 \001(\021\022\024\n\014publish_date\030\007 \001(\021\022"
  "\024\n\014publish_time\030\010 \001(\021\"X\n\nNewsStruct\022\"\n\004h"
  "ead\030\001 \002(\0132\024.test.proto.NewsHead\022&\n\006recor"
  "d\030\002 \003(\0132\026.test.proto.NewsRecord"
  ;
static ::_pbi::once_flag descriptor_table_news_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_news_2eproto = {
    false, false, 311, descriptor_table_protodef_news_2eproto,
    "news.proto",
    &descriptor_table_news_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_news_2eproto::offsets,
    file_level_metadata_news_2eproto, file_level_enum_descriptors_news_2eproto,
    file_level_service_descriptors_news_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_news_2eproto_getter() {
  return &descriptor_table_news_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_news_2eproto(&descriptor_table_news_2eproto);
namespace test {
namespace proto {

// ===================================================================

class NewsHead::_Internal {
 public:
  using HasBits = decltype(std::declval<NewsHead>()._impl_._has_bits_);
  static void set_has_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NewsHead::NewsHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test.proto.NewsHead)
}
NewsHead::NewsHead(const NewsHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewsHead* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.channel_id_ = from._impl_.channel_id_;
  // @@protoc_insertion_point(copy_constructor:test.proto.NewsHead)
}

inline void NewsHead::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.channel_id_){0}
  };
}

NewsHead::~NewsHead() {
  // @@protoc_insertion_point(destructor:test.proto.NewsHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewsHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NewsHead::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewsHead::Clear() {
// @@protoc_insertion_point(message_clear_start:test.proto.NewsHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewsHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional sint32 channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_channel_id(&has_bits);
          _impl_.channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewsHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.proto.NewsHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional sint32 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.proto.NewsHead)
  return target;
}

size_t NewsHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.proto.NewsHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional sint32 channel_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewsHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewsHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewsHead::GetClassData() const { return &_class_data_; }


void NewsHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewsHead*>(&to_msg);
  auto& from = static_cast<const NewsHead&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test.proto.NewsHead)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel_id()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewsHead::CopyFrom(const NewsHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.proto.NewsHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsHead::IsInitialized() const {
  return true;
}

void NewsHead::InternalSwap(NewsHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.channel_id_, other->_impl_.channel_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewsHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_news_2eproto_getter, &descriptor_table_news_2eproto_once,
      file_level_metadata_news_2eproto[0]);
}

// ===================================================================

class NewsRecord::_Internal {
 public:
  using HasBits = decltype(std::declval<NewsRecord>()._impl_._has_bits_);
  static void set_has_author(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_summary(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_update_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_publish_date(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_publish_time(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

NewsRecord::NewsRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test.proto.NewsRecord)
}
NewsRecord::NewsRecord(const NewsRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewsRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.author_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.update_date_){}
    , decltype(_impl_.update_time_){}
    , decltype(_impl_.publish_date_){}
    , decltype(_impl_.publish_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_author()) {
    _this->_impl_.author_.Set(from._internal_author(), 
      _this->GetArenaForAllocation());
  }
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_summary()) {
    _this->_impl_.summary_.Set(from._internal_summary(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    _this->_impl_.source_.Set(from._internal_source(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.update_date_, &from._impl_.update_date_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.publish_time_) -
    reinterpret_cast<char*>(&_impl_.update_date_)) + sizeof(_impl_.publish_time_));
  // @@protoc_insertion_point(copy_constructor:test.proto.NewsRecord)
}

inline void NewsRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.author_){}
    , decltype(_impl_.title_){}
    , decltype(_impl_.summary_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.update_date_){0}
    , decltype(_impl_.update_time_){0}
    , decltype(_impl_.publish_date_){0}
    , decltype(_impl_.publish_time_){0}
  };
  _impl_.author_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.author_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NewsRecord::~NewsRecord() {
  // @@protoc_insertion_point(destructor:test.proto.NewsRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewsRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.author_.Destroy();
  _impl_.title_.Destroy();
  _impl_.summary_.Destroy();
  _impl_.source_.Destroy();
}

void NewsRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewsRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:test.proto.NewsRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.author_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.summary_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.source_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.update_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.publish_time_) -
        reinterpret_cast<char*>(&_impl_.update_date_)) + sizeof(_impl_.publish_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewsRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes author = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_author();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes summary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_summary();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 update_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_update_date(&has_bits);
          _impl_.update_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 update_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_update_time(&has_bits);
          _impl_.update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 publish_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_publish_date(&has_bits);
          _impl_.publish_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 publish_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_publish_time(&has_bits);
          _impl_.publish_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewsRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.proto.NewsRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes author = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_author(), target);
  }

  // optional bytes title = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional bytes summary = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_summary(), target);
  }

  // optional bytes source = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_source(), target);
  }

  // optional sint32 update_date = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_update_date(), target);
  }

  // optional sint32 update_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_update_time(), target);
  }

  // optional sint32 publish_date = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(7, this->_internal_publish_date(), target);
  }

  // optional sint32 publish_time = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(8, this->_internal_publish_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.proto.NewsRecord)
  return target;
}

size_t NewsRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.proto.NewsRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes author = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_author());
    }

    // optional bytes title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_title());
    }

    // optional bytes summary = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_summary());
    }

    // optional bytes source = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_source());
    }

    // optional sint32 update_date = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_update_date());
    }

    // optional sint32 update_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_update_time());
    }

    // optional sint32 publish_date = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_publish_date());
    }

    // optional sint32 publish_time = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_publish_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewsRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewsRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewsRecord::GetClassData() const { return &_class_data_; }


void NewsRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewsRecord*>(&to_msg);
  auto& from = static_cast<const NewsRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test.proto.NewsRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_author(from._internal_author());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_summary(from._internal_summary());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.update_date_ = from._impl_.update_date_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.update_time_ = from._impl_.update_time_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.publish_date_ = from._impl_.publish_date_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.publish_time_ = from._impl_.publish_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewsRecord::CopyFrom(const NewsRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.proto.NewsRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsRecord::IsInitialized() const {
  return true;
}

void NewsRecord::InternalSwap(NewsRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.author_, lhs_arena,
      &other->_impl_.author_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.summary_, lhs_arena,
      &other->_impl_.summary_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewsRecord, _impl_.publish_time_)
      + sizeof(NewsRecord::_impl_.publish_time_)
      - PROTOBUF_FIELD_OFFSET(NewsRecord, _impl_.update_date_)>(
          reinterpret_cast<char*>(&_impl_.update_date_),
          reinterpret_cast<char*>(&other->_impl_.update_date_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NewsRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_news_2eproto_getter, &descriptor_table_news_2eproto_once,
      file_level_metadata_news_2eproto[1]);
}

// ===================================================================

class NewsStruct::_Internal {
 public:
  using HasBits = decltype(std::declval<NewsStruct>()._impl_._has_bits_);
  static const ::test::proto::NewsHead& head(const NewsStruct* msg);
  static void set_has_head(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::test::proto::NewsHead&
NewsStruct::_Internal::head(const NewsStruct* msg) {
  return *msg->_impl_.head_;
}
NewsStruct::NewsStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:test.proto.NewsStruct)
}
NewsStruct::NewsStruct(const NewsStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NewsStruct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.record_){from._impl_.record_}
    , decltype(_impl_.head_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    _this->_impl_.head_ = new ::test::proto::NewsHead(*from._impl_.head_);
  }
  // @@protoc_insertion_point(copy_constructor:test.proto.NewsStruct)
}

inline void NewsStruct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.record_){arena}
    , decltype(_impl_.head_){nullptr}
  };
}

NewsStruct::~NewsStruct() {
  // @@protoc_insertion_point(destructor:test.proto.NewsStruct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NewsStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.record_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.head_;
}

void NewsStruct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NewsStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:test.proto.NewsStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.record_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.head_ != nullptr);
    _impl_.head_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewsStruct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .test.proto.NewsHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test.proto.NewsRecord record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NewsStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test.proto.NewsStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .test.proto.NewsHead head = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // repeated .test.proto.NewsRecord record = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test.proto.NewsStruct)
  return target;
}

size_t NewsStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test.proto.NewsStruct)
  size_t total_size = 0;

  // required .test.proto.NewsHead head = 1;
  if (_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.head_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test.proto.NewsRecord record = 2;
  total_size += 1UL * this->_internal_record_size();
  for (const auto& msg : this->_impl_.record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NewsStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NewsStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NewsStruct::GetClassData() const { return &_class_data_; }


void NewsStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NewsStruct*>(&to_msg);
  auto& from = static_cast<const NewsStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:test.proto.NewsStruct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.record_.MergeFrom(from._impl_.record_);
  if (from._internal_has_head()) {
    _this->_internal_mutable_head()->::test::proto::NewsHead::MergeFrom(
        from._internal_head());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NewsStruct::CopyFrom(const NewsStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test.proto.NewsStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsStruct::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void NewsStruct::InternalSwap(NewsStruct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.record_.InternalSwap(&other->_impl_.record_);
  swap(_impl_.head_, other->_impl_.head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewsStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_news_2eproto_getter, &descriptor_table_news_2eproto_once,
      file_level_metadata_news_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace test
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test::proto::NewsHead*
Arena::CreateMaybeMessage< ::test::proto::NewsHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::proto::NewsHead >(arena);
}
template<> PROTOBUF_NOINLINE ::test::proto::NewsRecord*
Arena::CreateMaybeMessage< ::test::proto::NewsRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::proto::NewsRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::test::proto::NewsStruct*
Arena::CreateMaybeMessage< ::test::proto::NewsStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test::proto::NewsStruct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
